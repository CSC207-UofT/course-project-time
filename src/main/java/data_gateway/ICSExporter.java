package data_gateway;

import data_gateway.event.CalendarManager;
import data_gateway.event.EventReader;
import data_gateway.event.ObservableEventRepository;

import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.*;



public class ICSExporter {

    public void saveICS(ObservableEventRepository cal) throws IOException {
        List<EventReader> events = cal.getAllEvents();

        FileWriter writer = new FileWriter("time_calendar_export.ics", false);
        writer.write(generateHeader());
        writer.write(generateTimeZone());
        writer.append(generateICSEvents(events));
        writer.append("END:VCALENDAR");
        writer.close();
    }

    String generateHeader() {
        return  "BEGIN:VCALENDAR\n" +
                "PRODID:-//Time//Time Calendar 70.9054//EN\n" +
                "VERSION:2.0\n" +
                "CALSCALE:GREGORIAN\n" +
                "METHOD:PUBLISH\n" +
                "X-WR-CALNAME:\n" +
                "X-WR-TIMEZONE:" + TimeZone.getDefault().getID() +"\n" +
                "X-WR-CALDESC: Autogenerated Calendar from Time Management System\n";
    }

    String generateTimeZone() {
        TimeZone local = TimeZone.getDefault();

        return "BEGIN:VTIMEZONE\n" +
                "TZID:" + local.toString() + "\n" +
                "X-LIC-LOCATION:" + local.getDisplayName() + "\n" +
                "BEGIN:STANDARD\n" +
                "TZOFFSETFROM:" + formatOffset(local.getRawOffset()) +"\n" +
                "TZOFFSETTO:" + formatOffset(local.getRawOffset() - 1) + "\n" +
                "TZNAME:" + local.getDisplayName(true, 0) + "\n" +
                "DTSTART:19701025T020000\n" +
                "RRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU\n" +
                "END:STANDARD\n" +
                "BEGIN:DAYLIGHT\n" +
                "TZOFFSETFROM:" + formatOffset(local.getRawOffset() - 1) + "\n" +
                "TZOFFSETTO:" + formatOffset(local.getRawOffset()) +"\n" +
                "TZNAME:" + local.getDisplayName() + "\n" +
                "DTSTART:19700329T010000\n" +
                "RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU\n" +
                "END:DAYLIGHT\n" +
                "END:VTIMEZONE\n";
    }

    String formatOffset(int offset) {
        String formatted = "";
        if(offset >= 0) {
            formatted += "+";
        } else {
            formatted += "-";
        }

        String stringOffset = String.valueOf(offset);
        if(stringOffset.length() == 1) {
            formatted += "0" + stringOffset;
        } else {
            formatted += stringOffset;
        }

        return formatted + "00";
    }

    String generateICSEvents(List<EventReader> events) {

        StringBuilder eventsString = new StringBuilder();
        for(EventReader event : events) {
            eventsString.append("BEGIN:VEVENT\n" + "DTEND:");
            eventsString.append(event.getStartTime()).append("DTSTAMP:");
            eventsString.append(LocalDateTime.now()).append("\n");
            eventsString.append("UID:").append(event.getId()).append("\n");
            eventsString.append("CREATED:").append(LocalDateTime.now()).append("\n");
            eventsString.append("DESCRIPTION:").append(formatTags(event.getTags())).append("\n");
            eventsString.append("LAST-MODIFIED:").append(LocalDateTime.now()).append("\n");
            eventsString.append("LOCATION:\n").append("SEQUENCE:0\n").append("STATUS:CONFIRMED\n");
            eventsString.append("SUMMARY:").append(event.getName()).append("\n");
            eventsString.append("TRANSP:OPAQUE\n").append("END:VEVENT\n");
        }

        return eventsString.toString();
    }

    String formatTags(Set<String> tags) {
        StringBuilder stringTags = new StringBuilder();

        for(String tag : tags) {
            stringTags.append(tag).append(" ");
        }
        return stringTags.toString();
    }
}
